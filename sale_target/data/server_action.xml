<?xml version="1.0" encoding="utf-8"?>
<odoo>

    <record id="sale_target_update" model="ir.actions.server">
            <field name="name">=> Update target and quarters</field>
            <field name="model_id" ref="model_sale_target"/>
            <field name="binding_model_id" ref="model_sale_target"/>
            <field name="state">code</field>
            <field name="code">
# Se actualiza sólo si es del año en curso:
hoy   = datetime.datetime.now()
dia1  = datetime.datetime(hoy.year, 1, 1, 0, 0, 0)

if (hoy.year) == (record.target_year):
  op_count, op_value = 0, 0
  pr_count, pr_value = 0, 0
  pr_margin, pv_margin = 0, 0
  pv_count, pv_value = 0, 0
  fv_value, trim = 0, ''
  op_count_trim, op_count_trim, op_value_trim, pr_count_trim  = 0, 0, 0, 0
# pr_value_trim = 0
  pv_count_trim, pv_value_trim = 0, 0
  op_de_pptos, pr_de_trim = [], []
  pr_version_count = 0
  lead_lt_gap, quotation_lt_gap, target_lt_sale = False, False, False

# Vamos a actualizar el general y la línea del trimestre actual, si ya existía actualizo, si no la creo:
  if    hoy.month in [1,2,3]:
    trim = 'T1'
    inicio  = datetime.datetime(hoy.year, 1, 1, 0, 0, 0)
    fin     = datetime.datetime(hoy.year, 3, 31, 23, 59, 59)
  elif  hoy.month in [4,5,6]:
    trim = 'T2'
    inicio  = datetime.datetime(hoy.year, 4, 1, 0, 0, 0)
    fin     = datetime.datetime(hoy.year, 6, 30, 23, 59, 59)
  elif hoy.month in [6,7,8]:
    trim = 'T3'
    inicio  = datetime.datetime(hoy.year, 7, 1, 0, 0, 0)
    fin     = datetime.datetime(hoy.year, 9, 30, 23, 59, 59)
  else:
    trim = 'T4'
    inicio  = datetime.datetime(hoy.year, 10, 1, 0, 0, 0)
    fin     = datetime.datetime(hoy.year, 12, 31, 23, 59, 59)

  lineatrim  = env['sale.target.quarter'].search([('target_id','=',record.id),('quarter','=',trim)])
  if not lineatrim.id:
    nombre = trim + "/" + record.name
    lineatrim = env['sale.target.quarter'].create({'target_id':record.id, 'quarter':trim, 'name':nombre})

# Cálculos para los datos generales y trimestrales:
  oportunidades = env['crm.lead'].search([('user_id','=',record.user_id.id),('probability','&gt;',0),('probability','&lt;',100)])
  op_count = len(oportunidades.ids)
  for op in oportunidades:
    op_value += op.expected_revenue
    if (op.create_date > inicio) and (op.create_date &lt; fin):
      op_count_trim += 1
      op_value_trim += op.expected_revenue

  presupuestos = env['sale.order'].search([('user_id','=',record.user_id.id),('state','in',['draft','sent'])])
  pr_count = len(presupuestos.ids)
  for pr in presupuestos:
    pr_value += pr.amount_untaxed
    pr_margin += pr.margin
    if (pr.create_date > inicio) and (pr.create_date &lt; fin):
      pr_count_trim += 1
      pr_de_trim.append(pr.id)
      # Oportunidades de los presupuestos de este trimestre:
      if (pr.opportunity_id.id) and (pr.opportunity_id not in op_de_pptos): op_de_pptos.append(pr.opportunity_id)
  #    op_value_trim += op.expected_revenue

  # Comprobación de los presupuestos que son revisión en este trimestre:
  for op in op_de_pptos:
    pr_de_op_trim = 0
    for pr in op.order_ids:
      if pr.id in pr_de_trim:
        pr_de_op_trim +=1
    num_presupuestos = len(op.order_ids.ids)
    num_presupuestos_antiguos = num_presupuestos - pr_de_op_trim
    if (num_presupuestos > 1) and (num_presupuestos_antiguos == 0):  # Todos son de este trimestre
      pr_version_count += pr_de_op_trim - 1
    elif (num_presupuestos > 1) and (num_presupuestos_antiguos > 0):  # Ya había presupuestos antes de este trimestre, todo son versiones
      pr_version_count += pr_de_op_trim


  pedidos = env['sale.order'].search([('user_id','=',record.user_id.id),('state','in',['sale']),('date_order','>',dia1)])
  pv_count = len(pedidos.ids)
  for pv in pedidos:
    pv_value += pv.amount_untaxed
    pv_margin += pv.margin
    if (pv.date_order > inicio) and (pv.date_order &lt; fin):
      pv_count_trim += 1
      pv_value_trim += pv.amount_untaxed

  facturas = env['account.move'].search([('invoice_user_id','=',record.user_id.id),('state','in',['posted']),('invoice_date','>',dia1)])
  for fv in facturas:
    if fv.move_type == 'out_invoice':  fv_value += fv.amount_untaxed
    elif fv.move_type == 'out_refund': fv_value -= fv.amount_untaxed

  # Control fields in views:
  gap = record.target - pv_value
  if op_value &lt; gap: lead_lt_gap = True
  if pr_value &lt; gap: quotation_lt_gap = True
  if record.target &lt; pv_value: target_lt_sale = True

  record.write({'lead_count':op_count, 'lead_amount':op_value,
    'quotation_count':pr_count, 'quotation_amount':pr_value, 'quotation_margin':pr_margin,
    'sale_count':pv_count, 'sale_amount':pv_value, 'sale_margin':pv_margin,
    'invoiced_amount':fv_value, 'target_gap': gap,
    'lead_lt_gap':lead_lt_gap, 'quotation_lt_gap':quotation_lt_gap, 'target_lt_sale':target_lt_sale
  })

  lineatrim.write({'lead_count':op_count_trim, 'lead_amount':op_value_trim, 'quotation_count':pr_count_trim,
    'revision_count':pr_version_count, 'sale_count':pv_count_trim, 'sale_amount':pv_value_trim
  })

            </field>
    </record>

</odoo>