<?xml version="1.0" encoding="utf-8" ?>
<odoo>
    <data>

        <record id="suasor_invoice_create" model="base.automation">
            <field name="name">=>Crea Factura Suasor</field>
            <field name="model_id" ref="account.model_account_invoice"/>
            <field name="state">code</field>
            <field name="code">



if record.state in ['cancel']:
    record.suasor_invoice_id.unlink()

if record.state in ['open']:
    numerofactura, revisadas, lineas_ids, contador = "", [], [], 1
    for li in record.invoice_line_ids:
      if li.display_type == False:
        lineas_ids.append(li)
    lineas_num = len(lineas_ids)

      # La mayoría de las variables (distintas de false) no hacen falta para cálculo, pero si para ver por pantalla o escribir:
    iva1, irpf1, req1, iva2, irpf2, req2, iva3, irpf3, req3  = "","","","","","","","",""
    iva_neto1, iva_tax1, irpf_neto1, irpf_tax1, req_neto1, req_tax1 = "","","","","",""
    iva_neto2, iva_tax2, irpf_neto2, irpf_tax2, req_neto2, req_tax2 = "","","","","",""
    iva_neto3, iva_tax3, irpf_neto3, irpf_tax3, req_neto3, req_tax3 = "","","","","",""
    cc1, cc2, cc3, serv1, serv2, serv3, activo1, activo2, activo3 = "","","", "","","", "", "",""
    iva_percent1, iva_percent2, iva_percent3, irpf_percent1, irpf_percent2, irpf_percent3, req_percent1, req_percent2, req_percent3 = "","","","","","","","",""
    iva_cod1, iva_cod2, iva_cod3 = "","",""

    provincias = {'VI':'01', 'AB':'02', 'A':'03', 'AL':'04', 'AV':'05', 'BA':'06', 'PM':'07', 'B':'08', 'BU':'09', 'CC':'10', 'CA':'11', 'CS':'12',
        'CR':'13', 'C':'14', 'CU':'16', 'GI':'17', 'GR':'18', 'GU':'19', 'SS':'20', 'H':'21', 'HU':'22', 'J':'23', 'LE':'24', 'L':'25', 'LO':'26',
        'LU':'27', 'M':'28', 'MA':'29', 'MU':'30', 'NA':'31', 'OR':'32', 'PA':'34', 'GC':'35', 'PO':'36', 'SA':'37',  'TF':'38', 'S':'39', 'SG':'40',
        'SE':'41', 'SO':'42', 'T':'43', 'TE':'44', 'TO':'45', 'V':'46', 'VA':'47', 'VI':'48', 'ZA':'49','Z':'50', 'CE':'51', 'ME':'52'}

      # Si es factura de cliente hemos de poner nuestro número de factura, si es de proveedor el suyo:
    if   (record.number)  and (record.type in ['out_invoice','out_refund']): numerofactura = record.number
    elif (record.reference) and (record.type in ['in_invoice','in_refund']): numerofactura = record.reference

    if record.type in ['out_invoice','in_invoice']: factor = ''
    elif record.type in ['in_refund','out_refund']: factor = '-'

    cod_provincia = record.partner_id.state_id.code
    if (cod_provincia) and (cod_provincia in provincias):
      cod_provincia = provincias[cod_provincia]

    for li in lineas_ids:
      if not li.display_type:
          # Para el primer grupo de SUASOR:
          if (li.id not in revisadas) and (contador == 1) and (lineas_num > 0):
            impuestos = li.invoice_line_tax_ids.ids
            impuestos.sort()  # Ordenamos para poder comparar (por si se han introducido en otro orden en otras líneas)
            revisadas.append(li.id)
            cc1 = li.account_id.code
            if li.asset_id.id: activo1="X"
            lineas_num -= 1

            neto = li.price_subtotal
            if (li.product_id.type == "service"):   serv1="X"

              # Ver el tipo de impuestos de la línea, y sus futuras similares:
            for im in impuestos:
              tax = env['account.tax'].search([('id','=',im)])
              id_externo = env['ir.model.data'].search([('model','=','account.tax'),('res_id','=',tax.id)]).name
              if   (id_externo.find('iva')  != -1) :
                iva1  = True
                iva_neto1   = neto

                # Términos especiales en nombres de impuestos: ISP - IMPORT - EXPORT - SUJETO PASIVO - COMUNITAR:
                especial = False
                if  (tax.name.lower().find('sujeto pasivo') != -1): especial = True
                if  (tax.name.lower().find('isp') != -1): especial = True
                if  (tax.name.lower().find('import') != -1): especial = True
                if  (tax.name.lower().find('export') != -1): especial = True
                if  (tax.name.lower().find('comunitar') != -1): especial = True

                # Casos especiales (no se pone importe de iva, sino nombre):
                if  (tax.amount_type == 'group') and (especial == True):
                  iva_percent1 = tax.children_tax_ids[0].amount
                  iva_tax1  = neto * tax.children_tax_ids[0].amount / 100
                  iva_cod1  = tax.name
                elif (tax.amount_type != 'group') and (especial == True):
                  iva_percent1 = tax.amount
                  iva_tax1  = neto * tax.amount / 100
                  iva_cod1  = tax.name
                # Impuestos normales:
                else:
                  iva_percent1 = tax.amount
                  iva_tax1     = neto * tax.amount / 100
                  iva_cod1  = iva_percent1
              elif (id_externo.find('irpf') != -1) :
                irpf1 = True
                irpf_neto1    = neto
                irpf_percent1 = abs(tax.amount)
                irpf_tax1     = abs(neto * tax.amount / 100)
              elif (id_externo.find('req')  != -1) :
                req1  = True
                req_neto1    = neto
                req_percent1 = abs(tax.amount)
                req_tax1     = abs(neto * tax.amount / 100)

            for li1 in lineas_ids:
              impg1 = li1.invoice_line_tax_ids.ids
              impg1.sort()
              if (li1.id not in revisadas) and (impg1 == impuestos):
                revisadas.append(li1.id)
                if (iva1 == True):
                  iva_neto1    += li1.price_subtotal
                  iva_tax1     += li1.price_subtotal  * iva_percent1 / 100
                if (irpf1 == True):
                  irpf_neto1    += li1.price_subtotal
                  irpf_tax1     += li1.price_subtotal * irpf_percent1 / 100
                if (req1 == True):
                  req_neto1    += li1.price_subtotal
                  req_tax1     += li1.price_subtotal  * req_percent1 / 100
            if iva_tax1:  iva_tax1  = round(iva_tax1,2)
            if irpf_tax1: irpf_tax1 = round(irpf_tax1,2)
            if req_tax1:  req_tax1  = round(req_tax1,2)
            contador = 2

          # Para el segundo grupo de SUASOR:
          if (li.id not in revisadas) and (contador == 2) and (lineas_num > 0):
            impuestos = li.invoice_line_tax_ids.ids
            impuestos.sort()  # Ordenamos para poder comparar (por si se han introducido en otro orden en otras líneas)
            revisadas.append(li.id)
            cc2 = li.account_id.code
            if li.asset_id.id: activo2="X"
            lineas_num -= 1

            neto = li.price_subtotal
            if (li.product_id.type == "service"):   serv2="X"

              # Ver el tipo de impuestos de la línea, y sus futuras similares:
            for im in impuestos:
              tax = env['account.tax'].search([('id','=',im)])
              id_externo = env['ir.model.data'].search([('model','=','account.tax'),('res_id','=',tax.id)]).name
              if   (id_externo.find('iva')  != -1) :
                iva2  = True
                iva_neto2   = neto
                # Términos especiales en nombres de impuestos: ISP - IMPORT - EXPORT - SUJETO PASIVO - COMUNITAR:
                especial = False
                if  (tax.name.lower().find('sujeto pasivo') != -1): especial = True
                if  (tax.name.lower().find('isp') != -1): especial = True
                if  (tax.name.lower().find('import') != -1): especial = True
                if  (tax.name.lower().find('export') != -1): especial = True
                if  (tax.name.lower().find('comunitar') != -1): especial = True

                # Casos especiales (no se pone importe de iva, sino nombre):
                if  (tax.amount_type == 'group') and (especial == True):
                  iva_percent2 = tax.children_tax_ids[0].amount
                  iva_tax2  = neto * tax.children_tax_ids[0].amount / 100
                  iva_cod2  = tax.name
                elif (tax.amount_type != 'group') and (especial == True):
                  iva_percent2 = tax.amount
                  iva_tax2  = neto * tax.amount / 100
                  iva_cod2  = tax.name
                # Impuestos normales:
                else:
                  iva_percent2 = tax.amount
                  iva_tax2     = neto * tax.amount / 100
                  iva_cod2  = iva_percent2
              elif (id_externo.find('irpf') != -1) :
                irpf2 = True
                irpf_neto2    = neto
                irpf_percent2 = abs(tax.amount)
                irpf_tax2     = abs(neto * tax.amount / 100)
              elif (id_externo.find('req')  != -1) :
                req2  = True
                req_neto2    = neto
                req_percent2 = abs(tax.amount)
                req_tax2     = abs(neto * tax.amount / 100)

            for li1 in lineas_ids:
              impg1 = li1.invoice_line_tax_ids.ids
              impg1.sort()
              if (li1.id not in revisadas) and (impg1 == impuestos):
                revisadas.append(li1.id)
                if (iva2 == True):
                  iva_neto2    += li1.price_subtotal
                  iva_tax2     += li1.price_subtotal  * iva_percent2 / 100
                if (irpf2 == True):
                  irpf_neto2    += li1.price_subtotal
                  irpf_tax2     += li1.price_subtotal * irpf_percent2 / 100
                if (req2 == True):
                  req_neto2    += li1.price_subtotal
                  req_tax2     += li1.price_subtotal  * req_percent2 / 100
            if iva_tax2:  iva_tax2  = round(iva_tax2,2)
            if irpf_tax2: irpf_tax2 = round(irpf_tax2,2)
            if req_tax2:  req_tax2  = round(req_tax2,2)
            contador = 3

          # Para el tercer  grupo de SUASOR:
          if (li.id not in revisadas) and (contador == 3) and (lineas_num > 0):
            impuestos = li.invoice_line_tax_ids.ids
            impuestos.sort()  # Ordenamos para poder comparar (por si se han introducido en otro orden en otras líneas)
            revisadas.append(li.id)
            cc3 = li.account_id.code
            if li.asset_id.id: activo3="X"
            lineas_num -= 1

            neto = li.price_subtotal
            if (li.product_id.type == "service"):   serv3="X"

              # Ver el tipo de impuestos de la línea, y sus futuras similares:
            for im in impuestos:
              tax = env['account.tax'].search([('id','=',im)])
              id_externo = env['ir.model.data'].search([('model','=','account.tax'),('res_id','=',tax.id)]).name
              if   (id_externo.find('iva')  != -1) :
                iva3  = True
                iva_neto3   = neto
                # Términos especiales en nombres de impuestos: ISP - IMPORT - EXPORT - SUJETO PASIVO - COMUNITAR:
                especial = False
                if  (tax.name.lower().find('sujeto pasivo') != -1): especial = True
                if  (tax.name.lower().find('isp') != -1): especial = True
                if  (tax.name.lower().find('import') != -1): especial = True
                if  (tax.name.lower().find('export') != -1): especial = True
                if  (tax.name.lower().find('comunitar') != -1): especial = True

                # Casos especiales (no se pone importe de iva, sino nombre):
                if  (tax.amount_type == 'group') and (especial == True):
                  iva_percent3 = tax.children_tax_ids[0].amount
                  iva_tax3  = neto * tax.children_tax_ids[0].amount / 100
                  iva_cod3  = tax.name
                elif (tax.amount_type != 'group') and (especial == True):
                  iva_percent3 = tax.amount
                  iva_tax3  = neto * tax.amount / 100
                  iva_cod3  = tax.name
                # Impuestos normales:
                else:
                  iva_percent3 = tax.amount
                  iva_tax3     = neto * tax.amount / 100
                  iva_cod3  = iva_percent3

              elif (id_externo.find('irpf') != -1) :
                irpf3 = True
                irpf_neto3    = neto
                irpf_percent3 = abs(tax.amount)
                irpf_tax3     = abs(neto * tax.amount / 100)
              elif (id_externo.find('req')  != -1) :
                req3  = True
                req_neto3    = neto
                req_percent3 = abs(tax.amount)
                req_tax3     = abs(neto * tax.amount / 100)

            for li1 in lineas_ids:
              impg1 = li1.invoice_line_tax_ids.ids
              impg1.sort()
              if (li1.id not in revisadas) and (impg1 == impuestos):
                revisadas.append(li1.id)
                if (iva3 == True):
                  iva_neto3    += li1.price_subtotal
                  iva_tax3     += li1.price_subtotal  * iva_percent3 / 100
                if (irpf3 == True):
                  irpf_neto3    += li1.price_subtotal
                  irpf_tax3     += li1.price_subtotal * irpf_percent3 / 100
                if (req3 == True):
                  req_neto3    += li1.price_subtotal
                  req_tax3     += li1.price_subtotal  * req_percent3 / 100
            if iva_tax3:  iva_tax3  = round(iva_tax3,2)
            if irpf_tax3: irpf_tax3 = round(irpf_tax3,2)
            if req_tax3:  req_tax3  = round(req_tax3,2)
            contador = 4



    if (not record.suasor_invoice_id.id):
          # Finalizar: Comprobamos que hemos pasado por todas las líneas, y escribimos el registro oportuno:
        if (len(lineas_ids) - len(revisadas) > 0):
          suasor_invoice_id = env['suasor.invoice'].create({
                  'name': 'Suasor' + str(numerofactura) + 'No procesada',
                  'fecha_emision': datetime.datetime.strftime(record.date_invoice, '%d/%m/%Y'),
                  'tipo_factura': record.type,
                  'n_documento': numerofactura,
                  'total_factura': str(record.amount_total).replace('.',','),
                  'cuenta': record.account_id.code,
                  'nif': str(record.partner_id.vat),
                  'nombre': record.partner_id.name,
                  'provincia': str(cod_provincia),
                  'pais': (str(record.partner_id.country_id.code)),
                  'terminos_pago': str(record.payment_term_id.name),
                  'grupo': str(record.account_id.group_id.code_prefix),

                  'invoice_id': record.id,
          })
          record['suasor_invoice_id']=suasor_invoice_id.id

        else:
          if not record.amount_total == "":
            tot= factor + str(record.amount_total).replace('.',',')
          else: tot = ""
          if not iva_neto1 == "":
            in1= factor + str(iva_neto1).replace('.',',')
          else: in1 = ""
          if not iva_neto2 == "":
            in2= factor + str(iva_neto2).replace('.',',')
          else: in2 = ""
          if not iva_neto3 == "":
            in1= factor + str(iva_neto3).replace('.',',')
          else: in3 = ""

          if not iva_tax1 == "":
            it1= factor + str(iva_tax1).replace('.',',')
          else: it1 = ""
          if not iva_tax2 == "":
            it2= factor + str(iva_tax2).replace('.',',')
          else: it2 = ""
          if not iva_tax3 == "":
            it3= factor + str(iva_tax3).replace('.',',')
          else: it3 = ""

          suasor_invoice_id = env['suasor.invoice'].create({
                  'name': 'Suasor' + str(numerofactura),
                  'fecha_emision': datetime.datetime.strftime(record.date_invoice, '%d/%m/%Y'),
                  'fecha_emision_filtro': record.date_invoice,
                  'tipo_factura': record.type,
                  'n_documento': numerofactura,
                  'total_factura': tot,
                  'cuenta': record.account_id.code,
                  'nif': str(record.partner_id.vat),
                  'nombre': record.partner_id.name,
                  'provincia': str(cod_provincia),
                  'pais': (str(record.partner_id.country_id.code)),
                  'terminos_pago': str(record.payment_term_id.name),
                  'grupo': str(record.account_id.group_id.code_prefix),
                  'base_iva1':in1,
                  'iva_percent1': str(iva_cod1).replace('.',','),
                  'iva_tax1': it1,
                  'imp_irpf1': str(irpf_tax1).replace('.',','),
                  'irpf_percent1': str(irpf_percent1).replace('.',','),
                  'imp_recargo1': str(req_tax1).replace('.',','),
                  'req_percent1': str(req_percent1).replace('.',','),
                  'servicios1': serv1,
                  'bien_inversion1': activo1,
                  'cta_contrapartida1': str(cc1),
                  'base_retencion1': str(irpf_neto1).replace('.',','),

                  'base_iva2': in2,
                  'iva_percent2': str(iva_cod2).replace('.',','),
                  'iva_tax2': it2,
                  'imp_irpf2': str(irpf_tax2).replace('.',','),
                  'irpf_percent2': str(irpf_percent2).replace('.',','),
                  'imp_recargo2': str(req_tax2).replace('.',','),
                  'req_percent2': str(req_percent2).replace('.',','),
                  'servicios2': serv2,
                  'bien_inversion2': activo2,
                  'cta_contrapartida2': str(cc2),
                  'base_retencion2': str(irpf_neto2).replace('.',','),

                  'base_iva3': in3,
                  'iva_percent3': str(iva_cod3).replace('.',','),
                  'iva_tax3': it3,
                  'imp_irpf3': str(irpf_tax3).replace('.',','),
                  'irpf_percent3': str(irpf_percent3).replace('.',','),
                  'imp_recargo3': str(req_tax3).replace('.',','),
                  'req_percent3': str(req_percent3).replace('.',','),
                  'servicios3': serv3,
                  'bien_inversion3': activo3,
                  'cta_contrapartida3': str(cc3),
                  'base_retencion3': str(irpf_neto3).replace('.',','),

                  'invoice_id': record.id,
          })
          record['suasor_invoice_id']=suasor_invoice_id.id

    if (record.suasor_invoice_id.id):
          # Finalizar: Comprobamos que hemos pasado por todas las líneas, y escribimos el registro oportuno:
        if (len(lineas_ids) - len(revisadas) > 0):
          record.suasor_invoice_id.write({
                  'name': 'Suasor' + str(numerofactura) + 'No procesada',
                  'fecha_emision': datetime.datetime.strftime(record.date_invoice, '%d/%m/%Y'),
                  'fecha_emision_filtro': record.date_invoice,
                  'tipo_factura': record.type,
                  'n_documento': numerofactura,
                  'total_factura': str(record.amount_total).replace('.',','),
                  'cuenta': record.account_id.code,
                  'nif': str(record.partner_id.vat),
                  'nombre': record.partner_id.name,
                  'provincia': str(cod_provincia),
                  'pais': (str(record.partner_id.country_id.code)),
                  'terminos_pago': str(record.payment_term_id.name),
                  'grupo': str(record.account_id.group_id.code_prefix),


                  'invoice_id': record.id,
          })
        else:
          if not record.amount_total == "":
            tot= factor + str(record.amount_total).replace('.',',')
          else: tot = ""
          if not iva_neto1 == "":
            in1= factor + str(iva_neto1).replace('.',',')
          else: in1 = ""
          if not iva_neto2 == "":
            in2= factor + str(iva_neto2).replace('.',',')
          else: in2 = ""
          if not iva_neto3 == "":
            in1= factor + str(iva_neto3).replace('.',',')
          else: in3 = ""

          if not iva_tax1 == "":
            it1= factor + str(iva_tax1).replace('.',',')
          else: it1 = ""
          if not iva_tax2 == "":
            it2= factor + str(iva_tax2).replace('.',',')
          else: it2 = ""
          if not iva_tax3 == "":
            it3= factor + str(iva_tax3).replace('.',',')
          else: it3 = ""
          record.suasor_invoice_id.write({
                  'name': 'Suasor' + str(numerofactura),
                  'fecha_emision': datetime.datetime.strftime(record.date_invoice, '%d/%m/%Y'),
                  'fecha_emision_filtro': record.date_invoice,
                  'tipo_factura': record.type,
                  'n_documento': numerofactura,
                  'total_factura':tot,
                  'cuenta': record.account_id.code,
                  'nif': str(record.partner_id.vat),
                  'nombre': record.partner_id.name,
                  'provincia': str(cod_provincia),
                  'pais': (str(record.partner_id.country_id.code)),
                  'terminos_pago': str(record.payment_term_id.name),
                  'grupo': str(record.account_id.group_id.code_prefix),

                  'base_iva1': in1,
                  'iva_percent1': str(iva_cod1).replace('.',','),
                  'iva_tax1': it1,
                  'imp_irpf1': str(irpf_tax1).replace('.',','),
                  'irpf_percent1': str(irpf_percent1).replace('.',','),
                  'imp_recargo1': str(req_tax1).replace('.',','),
                  'req_percent1': str(req_percent1).replace('.',','),
                  'servicios1': serv1,
                  'bien_inversion1': activo1,
                  'cta_contrapartida1': str(cc1),
                  'base_retencion1': str(irpf_neto1).replace('.',','),

                  'base_iva2': in2,
                  'iva_percent2': str(iva_cod2).replace('.',','),
                  'iva_tax2': it2,
                  'imp_irpf2': str(irpf_tax2).replace('.',','),
                  'irpf_percent2': str(irpf_percent2).replace('.',','),
                  'imp_recargo2': str(req_tax2).replace('.',','),
                  'req_percent2': str(req_percent2).replace('.',','),
                  'servicios2': serv2,
                  'bien_inversion2': activo2,
                  'cta_contrapartida2': str(cc2),
                  'base_retencion2': str(irpf_neto2).replace('.',','),

                  'base_iva3': in3,
                  'iva_percent3': str(iva_cod3).replace('.',','),
                  'iva_tax3': it3,
                  'imp_irpf3': str(irpf_tax3).replace('.',','),
                  'irpf_percent3': str(irpf_percent3).replace('.',','),
                  'imp_recargo3': str(req_tax3).replace('.',','),
                  'req_percent3': str(req_percent3).replace('.',','),
                  'servicios3': serv3,
                  'bien_inversion3': activo3,
                  'cta_contrapartida3': str(cc3),
                  'base_retencion3': str(irpf_neto3).replace('.',','),

                  'invoice_id': record.id,
          })



            </field>
            <field name="trigger">on_create_or_write</field>
            <!--<field name="on_change_fields">state</field>-->
            <field name="filter_pre_domain">["|",["state","=","open"],["state","=","cancel"]]</field>
            <field name="active" eval="True"/>
        </record>

    </data>

</odoo>