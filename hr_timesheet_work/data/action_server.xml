<odoo>

    <record id="sale_order_from_aal" model="ir.actions.server">
            <field name="name">=> Presupuesto desde AALs</field>
            <field name="model_id" ref="model_sale_order"/>
            <field name="state">code</field>
            <field name="code">
if record.timesheet_ids.ids or record.product_consumed_ids.ids:
  neworder = env['sale.order'].create({'partner_id':record.partner_id.id})
  if record.product_consumed_ids:
    # Creating Section "Products":
    section_product = env['sale.order.line'].create({'order_id':neworder.id,
      'display_type':'line_section', 'name':'Products:'})
    for li in record.product_consumed_ids:
      newsol = env['sale.order.line'].create({'order_id':neworder.id,
        'product_id':li.product_id.id, 'product_uom_qty':-li.unit_amount, 'product_uom':li.product_uom_id.id})
  if record.timesheet_ids:
    # Creating Section "Services":
    section_product = env['sale.order.line'].create({'order_id':neworder.id,
      'display_type':'line_section', 'name':'Services:'})
    for li in record.timesheet_ids:
      date = str(li.date)
      date_str = date[0:4] + "/" + date[5:7] + "/" + date[-2:]
      name = date_str + " - " + li.so_line.name
      newsol = env['sale.order.line'].create({'order_id':neworder.id, 'product_uom':li.product_uom_id.id,
        'product_id':li.so_line.product_id.id, 'product_uom_qty':li.unit_amount, 'name':name})
  record.write({'new_sale_id':neworder.id})
else:
  raise Warning('No products or services consumed.')
            </field>
    </record>

    <record id="recalculate_special_discounts" model="ir.actions.server">
            <field name="name">=> Recalculate Special Discounts</field>
            <field name="model_id" ref="model_sale_order"/>
            <field name="state">code</field>
            <field name="code">
# Round prices with Odoo monetary_precision:
monetary_precision = env['decimal.precision'].search([('id','=',1)]).digits

# CASE "TARGER_PRICE" (udo prices are not recalculated, working with discount in SOL):
if record.discount_type == 'target_price':
  # Requirement: user discount per sale order line:
  group_id = env['ir.model.data'].search([('model','=','res.groups'),('name','=','group_discount_per_so_line')]).res_id
  group = env['res.groups'].search([('id','=',group_id)])
  if user not in group.users:
    raise Warning('It is required to enable discounts per sale order line in sales settings, please ask to your administrator.')

  # Calculating real total cost and sale without discount:
  cost_amount, price_amount, margin = 0,0,0
  for li in record.order_line:
    if (len(li.udo_line_ids.ids) == 0) and (li.product_uom_qty > 0):
      cost_amount += li.price_unit_cost * li.product_uom_qty
      price_amount += li.lst_price * li.product_uom_qty
    elif (len(li.udo_line_ids.ids) > 0) and (li.product_uom_qty > 0):
      cost_amount  += round(li.udo_cost_amount,monetary_precision)
      price_amount += round(li.price_subtotal / (1-li.discount/100),monetary_precision)

  if (record.target_price &lt; cost_amount):
    raise Warning('Saling under cost, not allowed.')

  else:
    margin = (1 - (record.target_price / price_amount)) * 100

  for li in record.order_line:
    if (len(li.udo_line_ids.ids) == 0) and (li.product_uom_qty > 0):
      li.write({'price_unit':li.lst_price, 'discount':margin})
    elif (len(li.udo_line_ids.ids) > 0) and (li.product_uom_qty > 0):
      for udoline in li.udo_line_ids:
        udoline['price_unit'] = udoline.price_unit * (1-margin/100)

  diference = round(record.target_price - record.amount_untaxed,2)
  if diference != 0:
    review = True
    for li in record.order_line:
      if (li.product_uom_qty == 1) and (review == True):
        li['price_unit'] = li.price_unit + diference
        review = False

# CASES FIX_PRICE_PRODUCT & AND MARGIN_OVER_COST  or  MARGIN_OVER_COST COMPLETELY:
else:
  for li in record.order_line:
    # If we use type, there is not line discount:
    if (li.discount != 0):
      li['discount'] = 0

    # Line NOT UDO:
    if (len(li.udo_line_ids.ids) == 0) and (li.product_uom_qty > 0):
      if li.product_uom.uom_type == 'reference':
        qty_uom = li.product_uom_qty
      elif li.product_uom.uom_type == 'bigger':
        qty_uom = li.product_uom_qty * li.product_uom.factor_inv
      elif li.product_uom.uom_type == 'smaller':
        qty_uom = li.product_uom_qty / li.product_uom.factor

      # Case 'services' and 'fixed_service_price':
      if (li.product_id.product_tmpl_id.our_service == True) and (record.discount_type == 'fixed_service_margin_over_cost'):
        li.write({'price_unit':record.price_our_service * qty_oum, 'lst_price':li.product_id.lst_price * qty_uom})
      # ... others:
      else:
        if (record.margin &lt; 100):
          li.write({'price_unit':(li.product_id.standard_price / (1 - record.margin / 100) * qty_uom), 'lst_price':li.product_id.lst_price * qty_uom})
        else:
          li.write({'price_unit':(li.product_id.standard_price  * (1 + record.margin / 100) * qty_uom), 'lst_price':li.product_id.lst_price * qty_uom})

    # Case Line IS 'computed by udos':
    elif (len(li.udo_line_ids.ids) > 0):
      for liudo in li.udo_line_ids:
            # Price unit cost:
        if (liudo.fix_price_unit_cost == True):
          price_unit_cost = liudo.price_unit_cost
        else:
          price_unit_cost = round(liudo.product_id.standard_price, monetary_precision)
            # Price unit sale:
        if (liudo.fix_price_unit_sale == True):
          price_unit = liudo.price_unit
        elif (liudo.fix_price_unit_sale == False) and (liudo.product_id.product_tmpl_id.our_service == True) and (record.discount_type == 'fixed_service_margin_over_cost'):
          price_unit = record.price_our_service
        else:
          if (record.margin &lt; 100):
            price_unit = round(price_unit_cost / (1 - record.margin / 100), monetary_precision)
          else:
            price_unit = round(price_unit_cost * (1 + record.margin / 100),monetary_precision)

        liudo.write({'price_unit': price_unit, 'price_unit_cost': price_unit_cost})
            </field>
    </record>

</odoo>
